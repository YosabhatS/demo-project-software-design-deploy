package com.cp.lab08sec1.demo.controller;

import java.util.List;
import java.util.concurrent.Callable;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cp.lab08sec1.demo.dto.MenuItemDTO;
import com.cp.lab08sec1.demo.dto.OrderInfoDTO;
import com.cp.lab08sec1.demo.dto.OrderItemDTO;
import com.cp.lab08sec1.demo.dto.OrderRequest;
import com.cp.lab08sec1.demo.model.OrderInfo;
import com.cp.lab08sec1.demo.model.OrderItem;
import com.cp.lab08sec1.demo.service.OrderDataService;
import com.cp.lab08sec1.demo.service.ResourceNotFoundException;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/data") // Base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Data Service
public class OrderDataController {

    private final OrderDataService orderDataService;

    public OrderDataController(OrderDataService orderDataService) {
        this.orderDataService = orderDataService;
    }

    // ----------------------------------------------------------------------
    // üö© Helper Method: ‡πÅ‡∏õ‡∏•‡∏á Blocking Call (Callable) ‡πÄ‡∏õ‡πá‡∏ô Mono
    // ----------------------------------------------------------------------
    private <T> Mono<T> toMono(Callable<T> callable) {
        // ‡πÉ‡∏ä‡πâ Mono.fromCallable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢ Blocking Call ‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô Thread Pool ‡∏≠‡∏∑‡πà‡∏ô
        return Mono.fromCallable(callable)
            .onErrorMap(ResourceNotFoundException.class, e -> 
                // ‡πÅ‡∏õ‡∏•‡∏á ResourceNotFoundException ‡πÄ‡∏õ‡πá‡∏ô Response 404
                new org.springframework.web.server.ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage()));
    }


    // ----------------------------------------------------------------------
    // üö© 1. GET /api/data/orders/{orderId} : ‡∏î‡∏∂‡∏á Order Info ‡∏´‡∏•‡∏±‡∏Å
    // ----------------------------------------------------------------------
    @GetMapping("/orders/{orderId}")
    public Mono<ResponseEntity<OrderInfoDTO>> fetchOrderInfo(@PathVariable Long orderId) {
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service (Blocking)
        return toMono(() -> orderDataService.findOrderInfo(orderId))
            // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Response
            .map(dto -> dto != null ? ResponseEntity.ok(dto) : ResponseEntity.notFound().build());
    }


    // ----------------------------------------------------------------------
    // üö© 2. GET /api/data/orders/{orderId}/items : ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Order Items ‡∏¢‡πà‡∏≠‡∏¢
    // ----------------------------------------------------------------------
    @GetMapping("/orders/{orderId}/items")
    public Flux<OrderItemDTO> fetchOrderItems(@PathVariable Long orderId) {
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service (Blocking) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List
        // 2. ‡πÅ‡∏õ‡∏•‡∏á Blocking List ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Flux (Stream)
        return Flux.fromIterable(orderDataService.findOrderItems(orderId));
    }


    // ----------------------------------------------------------------------
    // üö© 3. GET /api/data/menu/{menuId} : ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î MenuItem
    // ----------------------------------------------------------------------
    @GetMapping("/menu/{menuId}")
    public Mono<ResponseEntity<MenuItemDTO>> fetchMenuItem(@PathVariable Long menuId) {
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service (Blocking)
        return toMono(() -> orderDataService.findMenuItem(menuId))
            // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Response
            .map(dto -> dto != null ? ResponseEntity.ok(dto) : ResponseEntity.notFound().build());
    }


    // ----------------------------------------------------------------------
    // üö© 4. POST /api/data/orders : ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
    // ----------------------------------------------------------------------
    @PostMapping("/orders")
    public Mono<ResponseEntity<OrderInfoDTO>> createNewOrder(@RequestBody OrderRequest request) {
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service (Blocking/Transactional)
        return toMono(() -> orderDataService.createNewOrder(request))
            // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Response 201 Created
            .map(newOrderDto -> new ResponseEntity<>(newOrderDto, HttpStatus.CREATED));
    }
    
    @GetMapping("/orders/table/{tableId}/current")
    public Mono<ResponseEntity<OrderInfoDTO>> fetchCurrentOrder(@PathVariable Long tableId) {
        return toMono(() -> orderDataService.findCurrentOrder(tableId))
            .map(optionalDto -> optionalDto.map(ResponseEntity::ok)
                                           .orElse(ResponseEntity.notFound().build())); // 200 OK ‡∏´‡∏£‡∏∑‡∏≠ 404 NOT_FOUND
    }
    
 // ----------------------------------------------------------------------
    // üö© NEW: 5. GET /api/data/menu/all : ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    // ----------------------------------------------------------------------
    @GetMapping("/menu/all") // <--- Endpoint ‡∏ó‡∏µ‡πà Project Web (8082) ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    public Flux<MenuItemDTO> fetchAllMenuItems() {
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service (Blocking) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List
        // 2. ‡πÅ‡∏õ‡∏•‡∏á Blocking List ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Flux (Stream)
        return toMono(() -> orderDataService.findAllMenuItems()) // ‡πÅ‡∏õ‡∏•‡∏á List ‡πÄ‡∏õ‡πá‡∏ô Mono
            .flatMapMany(Flux::fromIterable); // ‡πÅ‡∏õ‡∏•‡∏á Mono<List> ‡πÄ‡∏õ‡πá‡∏ô Flux<MenuItemDTO>
    }
    
    @GetMapping("/orders/status/{status}")
    public Flux<OrderInfoDTO> fetchOrdersByStatus(@PathVariable String status) {
        // ‡πÅ‡∏õ‡∏•‡∏á Blocking List ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Flux (Stream)
        return Flux.fromIterable(orderDataService.findOrdersByStatus(status));
    }
    
    @PutMapping("/orders/{orderId}/status/{status}")
    public Mono<ResponseEntity<OrderInfoDTO>> updateOrderStatus(
            @PathVariable Long orderId,
            @PathVariable String status) {
        
        return toMono(() -> orderDataService.updateOrderStatus(orderId, status))
            .map(dto -> ResponseEntity.ok(dto))
            // ‡πÅ‡∏õ‡∏•‡∏á ResourceNotFoundException (‡∏à‡∏≤‡∏Å Service) ‡πÄ‡∏õ‡πá‡∏ô HTTP 404
            .onErrorMap(ResourceNotFoundException.class, e -> 
                new org.springframework.web.server.ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage()))
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô IllegalArgumentException ‡πÄ‡∏õ‡πá‡∏ô HTTP 400
            .onErrorMap(IllegalArgumentException.class, e -> 
                new org.springframework.web.server.ResponseStatusException(HttpStatus.BAD_REQUEST, e.getMessage()));
    }
    
    @GetMapping("/orders/table/{tableId}/active")
    public Mono<ResponseEntity<OrderInfoDTO>> getActiveOrderByTable(@PathVariable Long tableId) {
        return toMono(() -> orderDataService.findCurrentOrder(tableId))
                .map(optionalDto -> optionalDto
                    .map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build()));
    }
    
    @GetMapping("/orders/table/{tableId}/all")
    public Flux<OrderInfoDTO> getAllOrdersByTable(@PathVariable Long tableId) {
        return Flux.fromIterable(orderDataService.findAllOrdersForTable(tableId));
    }
    

}
