package com.cp.lab09sec1.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cp.lab09sec1.dto.MenuItemDTO;
import com.cp.lab09sec1.dto.OrderInfoDTO;
import com.cp.lab09sec1.dto.OrderItemDTO;
import com.cp.lab09sec1.dto.OrderItemRequest;
import com.cp.lab09sec1.dto.OrderRequest;


import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class OrderService implements IOrderService{
	@Autowired
	 private final DataServiceClient dataServiceClient;
	 public OrderService(DataServiceClient dataServiceClient) {
	        this.dataServiceClient = dataServiceClient;
	 }
	 
	 @Override
	    public Mono<OrderInfoDTO> getOrderById(Long orderId) {
	        
	        // 1. ‡∏î‡∏∂‡∏á OrderInfo ‡∏´‡∏•‡∏±‡∏Å (Mono<OrderInfoDTO>)
	        Mono<OrderInfoDTO> orderMono = dataServiceClient.fetchOrderInfo(orderId)
	            .switchIfEmpty(Mono.error(() -> new ResourceNotFoundException("Order ID " + orderId + " not found remotely.")));

	        // 2. ‡∏î‡∏∂‡∏á OrderItems ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (Flux<OrderItemDTO>)
	        Flux<OrderItemDTO> itemsFlux = dataServiceClient.fetchOrderItems(orderId);

	        // 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î MenuItem ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ OrderItem (Enrichment)
	        Flux<OrderItemDTO> enrichedItemsFlux = itemsFlux
	            .flatMap(orderItem -> 
	                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö Non-Blocking
	                dataServiceClient.fetchMenuItem(orderItem.getMenuId()) 
	                    .map(menuItemDTO -> {
	                        // ‡∏ú‡∏π‡∏Å DTO ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö OrderItemDTO
	                        orderItem.setMenuItemDetails(menuItemDTO); 
	                        return orderItem;
	                    })
	                    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ OrderItem ‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Graceful Degradation)
	                    .defaultIfEmpty(orderItem) 
	            );

	        // 4. ‡∏£‡∏ß‡∏° OrderInfo Mono ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö List ‡∏Ç‡∏≠‡∏á OrderItems ‡∏ó‡∏µ‡πà Enriched ‡πÅ‡∏•‡πâ‡∏ß (collectList)
	        return orderMono.zipWith(enrichedItemsFlux.collectList(), (order, items) -> {
	            order.setItems(items);
	            return order;
	        });
	    }

	    // -----------------------------------------------------------------------
	    // üö© 2. POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà
	    // -----------------------------------------------------------------------
	    @Override
	    public Mono<OrderInfoDTO> createNewOrder(OrderRequest request) {
	        
	        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Consistency Check)
	        
	        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ OrderItemRequest ‡πÄ‡∏õ‡πá‡∏ô Flux
	        Flux<OrderItemRequest> itemRequestsFlux = Flux.fromIterable(request.getItems());

	        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Enrichment/Validation)
	        Flux<OrderItemDTO> validatedItemsFlux = itemRequestsFlux
	            .flatMap(req -> 
	                dataServiceClient.fetchMenuItem(req.getMenuId()) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
	                    .map(menuItemDTO -> {
	                        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠, ‡∏™‡∏£‡πâ‡∏≤‡∏á OrderItemDTO ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Data Service
	                        OrderItemDTO itemDto = new OrderItemDTO();
	                        // ‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà ID ‡πÅ‡∏•‡∏∞ Quantity ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠)
	                        // ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢ Data Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	                        itemDto.setMenuId(menuItemDTO.getId()); 
	                        itemDto.setQuantity(req.getQuantity());
	                        return itemDto;
	                    })
	                    .switchIfEmpty(Mono.error(new ResourceNotFoundException("Menu item " + req.getMenuId() + " not found.")))
	            );

	        // 2. ‡∏™‡πà‡∏á OrderRequest ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á Data Service
	        return validatedItemsFlux.collectList()
	            .flatMap(validatedItemsList -> {
	                
	                // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á Final Request Object (‡πÉ‡∏ä‡πâ OrderRequest ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô)
	                // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ OrderRequest ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á Input ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	                
	                OrderRequest finalRequest = new OrderRequest();
	                finalRequest.setTableId(request.getTableId());
	                
	                // ‡πÅ‡∏õ‡∏•‡∏á validatedItemsList (List<OrderItemDTO>) ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô 
	                // List<OrderItemRequest> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á OrderRequest
	                List<OrderItemRequest> requestItemsForDataService = validatedItemsList.stream()
	                    .map(dto -> {
	                        OrderItemRequest req = new OrderItemRequest();
	                        req.setMenuId(dto.getMenuId());
	                        req.setQuantity(dto.getQuantity());
	                        return req;
	                    })
	                    .collect(Collectors.toList());
	                    
	                finalRequest.setItems(requestItemsForDataService); 
	                
	                // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Order
	                return dataServiceClient.createOrder(finalRequest);
	            });
	            // üí° ACID Principle: Atomicity ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢ Data Service ‡∏ú‡πà‡∏≤‡∏ô Transaction
	    }
	    
	    public Mono<OrderInfoDTO> findActiveOrderByTable(Long tableId) {
	        
	        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô DataServiceClient
	        return dataServiceClient.fetchActiveOrderForTable(tableId)
	                
	                // 2. ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ Mono ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Controller
	                //    Exception (ResourceNotFound, RemoteServiceException) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ OrderController ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
	                .onErrorResume(RemoteServiceException.class, Mono::error)
	                .onErrorResume(ResourceNotFoundException.class, Mono::error);
	    }
	    public Flux<MenuItemDTO> getAllMenuItems() {
	        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DataServiceClient
	        return dataServiceClient.fetchAllMenuItems()
	            // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error (‡∏ñ‡πâ‡∏≤ Data Service ‡∏•‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
	            .onErrorResume(RemoteServiceException.class, Mono::error);
	            
	        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ResourceNotFound ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏¢ ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Flux ‡∏ß‡πà‡∏≤‡∏á
	    }
	    
	    public Flux<OrderInfoDTO> getOrdersByStatus(String status) {
	        // 1. ‡∏î‡∏∂‡∏á OrderInfo ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Flux<OrderInfoDTO>)
	        return dataServiceClient.fetchOrdersByStatus(status)
	            // 2. ‡πÉ‡∏ä‡πâ flatMap ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Enriched ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order 
	            .flatMap(orderInfo -> {
	                // 2.1 ‡∏î‡∏∂‡∏á OrderItems ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (Flux<OrderItemDTO>)
	                Flux<OrderItemDTO> itemsFlux = dataServiceClient.fetchOrderItems(orderInfo.getId());

	                // 2.2 ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î MenuItem ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ OrderItem
	                Flux<OrderItemDTO> enrichedItemsFlux = itemsFlux
	                    .flatMap(itemDto -> dataServiceClient.fetchMenuItem(itemDto.getMenuId())
	                        .map(menuItemDto -> {
	                            // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ setMenuItemDetails() ‡πÅ‡∏ó‡∏ô setName()
	                            itemDto.setMenuItemDetails(menuItemDto); 
	                            return itemDto;
	                        })
	                        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö Menu (fetchMenuItem ‡∏£‡∏µ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô 404/Empty Mono) 
	                        // ‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á OrderItem ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ (itemDto ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏ô‡∏π)
	                        .switchIfEmpty(Mono.just(itemDto)) 
	                    );
	                
	                // 3. ‡∏£‡∏ß‡∏° OrderInfo ‡∏´‡∏•‡∏±‡∏Å ‡∏Å‡∏±‡∏ö enrichedItemsList
	                return enrichedItemsFlux.collectList()
	                    .map(itemsList -> {
	                        orderInfo.setItems(itemsList); // orderInfo.items ‡∏Ñ‡∏∑‡∏≠ List<OrderItemDTO>
	                        return orderInfo;
	                    });
	            });
	    }
	    
	    public Mono<OrderInfoDTO> completeOrder(Long orderId) {
	        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Data Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "COMPLETED"
	        return dataServiceClient.updateOrderStatus(orderId, "COMPLETED");
	    }

}
